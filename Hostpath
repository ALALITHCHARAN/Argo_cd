âœ… **Yes, absolutely!**

You can keep your existing NGINX-hosted **webserver UI exactly as it is**,
and run **Argo CD on a separate host path (e.g., `/argocd`)** â€” **without affecting the existing UI** â€” as long as:

---

### âœ… Conditions You Must Meet:

| Requirement                                             | Why it's needed                           |
| ------------------------------------------------------- | ----------------------------------------- |
| Both UIs are served through the same Ingress controller | So traffic can be routed cleanly          |
| You give Argo CD a **different path** (like `/argocd`)  | Prevents path conflicts with `/` or `/ui` |
| You patch Argo CD to understand subpath (`/argocd`)     | So its frontend and API work at `/argocd` |
| You use **path-based routing**                          | To share same hostname without TLS/SNI    |

---

## ðŸ§© Visual Summary

| URL                         | What it shows                 |
| --------------------------- | ----------------------------- |
| `http://your.domain/`       | Your webserver UI (unchanged) |
| `http://your.domain/argocd` | Argo CD UI                    |

---

## ðŸ§­ Full Plan: Keep Your UI As-Is + Add Argo CD on `/argocd`

### âœ… 1. Donâ€™t touch your existing webserver or Ingress â€” leave it as it is.

```yaml
# Example (keep this unchanged)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-web-ui
  namespace: my-namespace
spec:
  rules:
    - host: your.domain
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-web-ui-service
                port:
                  number: 80
```

---

### âœ… 2. Add a **new Ingress** for Argo CD with `/argocd` path

```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-ingress
  namespace: argocd
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - host: your.domain
      http:
        paths:
          - path: /argocd(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: argocd-server
                port:
                  number: 80
```

---

### âœ… 3. Patch Argo CD deployment to support `/argocd`

```bash
kubectl -n argocd patch deployment argocd-server \
  --type='json' \
  -p='[
    {"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--rootpath=/argocd"},
    {"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--basehref=/argocd/"}
]'
```

Then restart:

```bash
kubectl rollout restart deployment argocd-server -n argocd
```

---

### âœ… 4. Access the UI

| URL                         | Result                   |
| --------------------------- | ------------------------ |
| `http://your.domain/`       | Your existing NGINX UI âœ… |
| `http://your.domain/argocd` | Argo CD UI âœ…             |

---

## ðŸ§¾ Summary

| Goal                                   | Result |
| -------------------------------------- | ------ |
| Keep existing NGINX-based UI untouched | âœ… Yes  |
| Serve Argo CD on `/argocd` subpath     | âœ… Yes  |
| Share same domain                      | âœ… Yes  |
| No conflict between apps               | âœ… Yes  |
| Need path rewrite + deployment patch   | âœ… Yes  |

---

Let me know if:

* You want to serve Argo CD under a **separate hostname** instead?
* Youâ€™re using **Helm** for Argo CD and want Helm-based patching?

Happy to guide it your way!
