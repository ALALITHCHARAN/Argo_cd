Absolutely! Here's a **ready-made YAML patch script** that you can apply directly to your Argo CD offline VM setup to create a new Argo CD user (`myuser`) with a **custom password** (you can change both values).

---

## 🛠️ 🔐 Patch Script: Create Argo CD User with Login Access

### 🧾 STEP 1: Generate bcrypt hash for your custom password

Let’s assume you want the password to be `myuser123`.

On any machine with `htpasswd` or Python:

```bash
htpasswd -bnBC 10 "" myuser123 | tr -d ':\n'
```

Sample output (do not reuse in production):

```
$2y$10$WzQdZWZ7GU3EY9q4DnB3D.FYvUwYVg6Q8OKr5db6P3MTl0klcSL1u
```

---

### 📦 STEP 2: Create Patch Script YAML (with your hash)

Create a file called `argo-user-setup.yaml`:

```yaml
# Patch argocd-cm to create user account
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
data:
  accounts.myuser: login

---
# Patch argocd-secret to set bcrypt password
apiVersion: v1
kind: Secret
metadata:
  name: argocd-secret
  namespace: argocd
stringData:
  myuser.password: "$2y$10$WzQdZWZ7GU3EY9q4DnB3D.FYvUwYVg6Q8OKr5db6P3MTl0klcSL1u"
  myuser.passwordMtime: "2025-06-25T00:00:00Z"
```

> Replace `myuser` with your desired username
> Replace bcrypt string with your actual hashed password

---

### 🚀 STEP 3: Apply the YAML

```bash
kubectl apply -f argo-user-setup.yaml
```

---

### 🔄 STEP 4: Restart Argo CD server to apply changes

```bash
kubectl -n argocd rollout restart deployment argocd-server
```

---

### ✅ STEP 5: Login using your new user

```bash
argocd login localhost:8080 \
  --username myuser \
  --password myuser123 \
  --insecure
```

---

## 🔒 Optional RBAC Access (Full Admin Role)

To give full access, run this (optional):

```bash
kubectl -n argocd patch configmap argocd-rbac-cm \
  --type merge \
  -p '{"data":{"policy.csv":"p, myuser, *, *, *, allow"}}'
```

---

## ✅ Done!

Let me know your desired:

* Username
* Password

And I can generate the exact YAML file with bcrypt hash and everything ready to copy-paste.
