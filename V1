Setting up **Argo CD** on an **offline VM (air-gapped environment)** requires careful preparation since you won't have internet access. Below is a **step-by-step guide** to install and run Argo CD in such an environment, including downloading all necessary artifacts beforehand.

---

## 🧰 Prerequisites (To Be Done on a Machine with Internet)

1. **Operating System:** Linux (preferably Ubuntu/CentOS)
2. **Kubernetes Cluster** (already running on the offline VM)

   * Can use Minikube, K3s, kubeadm, or any other distro.
3. **kubectl** installed and configured.
4. **Docker or container runtime** on both online and offline machines.
5. **Helm** (optional, if using Helm charts)

---

## 🌐 Step 1: Download Required Argo CD Files (On Internet-Connected Machine)

### 1.1 Pull Argo CD Container Images

```bash
# Replace with desired version (e.g., v2.11.0)
VERSION=v2.11.0

docker pull quay.io/argoproj/argocd:$VERSION
docker pull quay.io/argoproj/argocd:v2.11.0
docker pull quay.io/argoproj/argocd-dex:v2.11.0
docker pull quay.io/argoproj/argocd-redis:v2.11.0
docker pull quay.io/argoproj/argocd-applicationset:v2.11.0
docker pull quay.io/argoproj/argocd-notifications:v2.11.0
```

### 1.2 Save Docker Images to .tar Files

```bash
mkdir argocd-images
cd argocd-images

docker save quay.io/argoproj/argocd:$VERSION -o argocd.tar
docker save quay.io/argoproj/argocd-dex:$VERSION -o dex.tar
docker save quay.io/argoproj/argocd-redis:$VERSION -o redis.tar
docker save quay.io/argoproj/argocd-applicationset:$VERSION -o applicationset.tar
docker save quay.io/argoproj/argocd-notifications:$VERSION -o notifications.tar
```

### 1.3 Download Argo CD Manifests

```bash
wget https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml -O argocd-install.yaml
```

---

## 📦 Step 2: Transfer Files to Offline VM

Use `scp`, `rsync`, USB, or any other method to move:

* `*.tar` files (Docker images)
* `argocd-install.yaml`

---

## 🔧 Step 3: Load Images on Offline VM

```bash
docker load -i argocd.tar
docker load -i dex.tar
docker load -i redis.tar
docker load -i applicationset.tar
docker load -i notifications.tar
```

---

## 🚀 Step 4: Install Argo CD on Kubernetes

Make sure your Kubernetes cluster is running, then:

```bash
kubectl create namespace argocd
kubectl apply -n argocd -f argocd-install.yaml
```

> 🧠 **Note**: If any of the pods fail due to image pull issues, edit the manifest and replace the image URLs with the ones you've loaded locally, or push them to a local registry.

---

## 🔑 Step 5: Access the Argo CD API Server

### Option 1: Port-forward (simple, for local access)

```bash
kubectl port-forward svc/argocd-server -n argocd 8080:443
```

Then open: `https://localhost:8080`

### Option 2: Expose via Ingress or NodePort (requires configuration)

---

## 🔐 Step 6: Login to Argo CD

### Get the default admin password:

```bash
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d && echo
```

Then:

```bash
argocd login localhost:8080
```

Use:

* Username: `admin`
* Password: (output from above)

---

## 🎯 Step 7: Register a Git Repo and Start Syncing

```bash
argocd repo add https://github.com/your-org/your-repo.git \
  --username <user> --password <password>
```

Create an application:

```bash
argocd app create my-app \
  --repo https://github.com/your-org/your-repo.git \
  --path k8s-manifests \
  --dest-server https://kubernetes.default.svc \
  --dest-namespace default
```

Sync it:

```bash
argocd app sync my-app
```

---

## ✅ Optional: Run Argo CD UI in Browser

If you forwarded the port (`8080`), you can go to:

```
https://localhost:8080
```

Ignore self-signed certificate warnings.

---

## 🧩 Optional Enhancements

* Set up **self-hosted Docker registry** to manage images offline.
* Use **Helm chart** (also works offline if packaged).
* Automate using **Kustomize** or **Helm + Argo CD Applicationsets**.

---

## Need Help?

Let me know if:

* You need a **local Docker registry setup**.
* You want **auto-sync with GitOps**.
* You’re using **Minikube/K3s/Kubeadm** and need cluster setup help.

I can provide exact steps for your VM’s distro and setup.

